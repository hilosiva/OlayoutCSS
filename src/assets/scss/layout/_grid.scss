@charset "UTF-8";
@use "sass:math";
@use "../global" as *;

// ====================================
//  Grid
// ====================================

[data-grid] {
  --#{$prefix}-grid-columns: #{$column};
  display: grid;
}

// Columns
// ----------------------------
[data-cols] {
  --#{$prefix}-grid-template-colmns: repeat(var(--#{$prefix}-grid-columns, 1), minmax(0, 1fr));
  grid-template-columns: var(--#{$prefix}-grid-template-colmns);
}

@for $i from 1 through $column {
  [data-cols~="#{$i}"] {
    --#{$prefix}-grid-columns: #{$i};
  }
}

@each $device, $breakpoint in $breakpoints {
  @include mq($device) {
    @for $i from 1 through $column {
      [data-cols~="#{$device}:#{$i}"] {
        --#{$prefix}-grid-columns: #{$i};
      }
    }
  }
}

// Rows
// ----------------------------
[data-rows] {
  --#{$prefix}-grid-rows: #{$row};
  --#{$prefix}-grid-template-rows: repeat(var(--#{$prefix}-grid-rows), minmax(0, 1fr));

  grid-template-rows: var(--#{$prefix}-grid-template-rows);
}

@for $i from 1 through $row {
  [data-rows~="#{$i}"] {
    --#{$prefix}-grid-rows: #{$i};
  }
}

@each $device, $breakpoint in $breakpoints {
  @include mq($device) {
    @for $i from 1 through $row {
      [data-rows~="#{$device}:#{$i}"] {
        --#{$prefix}-grid-rows: #{$i};
      }
    }
  }
}

// Offset
// ----------------------------

[data-grid-offset~="small"] {
  --#{$prefix}-grid-template-colmns: var(--#{$prefix}-sm-offset) repeat(var(--#{$prefix}-grid-columns), minmax(0, 1fr)) var(--#{$prefix}-sm-offset);
}
[data-grid-offset~="medium"] {
  --#{$prefix}-grid-template-colmns: var(--#{$prefix}-md-offset) repeat(var(--#{$prefix}-grid-columns), minmax(0, 1fr)) var(--#{$prefix}-md-offset);
}
[data-grid-offset~="large"] {
  --#{$prefix}-grid-template-colmns: var(--#{$prefix}-lg-offset) repeat(var(--#{$prefix}-grid-columns), minmax(0, 1fr)) var(--#{$prefix}-lg-offset);
}
[data-grid-offset~="xlarge"] {
  --#{$prefix}-grid-template-colmns: var(--#{$prefix}-xl-offset) repeat(var(--#{$prefix}-grid-columns), minmax(0, 1fr)) var(--#{$prefix}-xl-offset);
}
[data-grid-offset~="none"] {
  --#{$prefix}-grid-template-colmns: repeat(var(--#{$prefix}-grid-columns), minmax(0, 1fr));
}

@each $device, $breakpoint in $breakpoints {
  @include mq($device) {
    [data-grid-offset~="#{$device}:small"] {
      --#{$prefix}-grid-template-colmns: var(--#{$prefix}-sm-offset) repeat(var(--#{$prefix}-grid-columns), minmax(0, 1fr)) var(--#{$prefix}-sm-offset);
    }
    [data-grid-offset~="#{$device}:medium"] {
      --#{$prefix}-grid-template-colmns: var(--#{$prefix}-md-offset) repeat(var(--#{$prefix}-grid-columns), minmax(0, 1fr)) var(--#{$prefix}-md-offset);
    }
    [data-grid-offset~="#{$device}:large"] {
      --#{$prefix}-grid-template-colmns: var(--#{$prefix}-lg-offset) repeat(var(--#{$prefix}-grid-columns), minmax(0, 1fr)) var(--#{$prefix}-lg-offset);
    }
    [data-grid-offset~="#{$device}:xlarge"] {
      --#{$prefix}-grid-template-colmns: var(--#{$prefix}-xl-offset) repeat(var(--#{$prefix}-grid-columns), minmax(0, 1fr)) var(--#{$prefix}-xl-offset);
    }
    [data-grid-offset~="#{$device}:none"] {
      --#{$prefix}-grid-template-colmns: repeat(var(--#{$prefix}-grid-columns), minmax(0, 1fr));
    }
  }
}

[data-grid-item] {
  display: flex;
  flex-direction: column;
}

// Column
// ----------------------------
@for $i from 1 through $column {
  [data-col~="#{$i}"] {
    grid-column: span $i / span $i;
  }

  [data-col-start~="#{$i}"] {
    grid-column-start: $i;
  }

  [data-col-end~="#{$i}"] {
    grid-column-end: $i;
  }
}

[data-col~="full"] {
  grid-column: 1 / -1;
}

[data-col~="auto"] {
  grid-column: auto;
}

[data-col-start~="auto"] {
  grid-column-start: auto;
}

[data-col-end~="auto"] {
  grid-column-end: auto;
}

@each $device, $breakpoint in $breakpoints {
  @include mq($device) {
    @for $i from 1 through $column {
      [data-col~="#{$device}:#{$i}"] {
        grid-column: span $i / span $i;
      }

      [data-col-start~="#{$device}:#{$i}"] {
        grid-column-start: $i;
      }

      [data-col-end~="#{$device}:#{$i}"] {
        grid-column-end: $i;
      }
    }

    [data-col~="#{$device}:full"] {
      grid-column: 1 / -1;
    }

    [data-col~="#{$device}:auto"] {
      grid-column: auto;
    }

    [data-col-start~="#{$device}:auto"] {
      grid-column-start: auto;
    }

    [data-col-end~="#{$device}:auto"] {
      grid-column-end: auto;
    }
  }
}

// Row
// ----------------------------

@for $i from 1 through $row {
  [data-row~="#{$i}"] {
    grid-row: span $i / span $i;
  }

  [data-row-start~="#{$i}"] {
    grid-row-start: $i;
  }

  [data-row-end~="#{$i}"] {
    grid-row-end: $i;
  }
}

[data-row~="full"] {
  grid-row: 1 / -1;
}

[data-row~="auto"] {
  grid-row: auto;
}

[data-row-start~="auto"] {
  grid-row-start: auto;
}

[data-row-end~="auto"] {
  grid-row-end: auto;
}

@each $device, $breakpoint in $breakpoints {
  @include mq($device) {
    @for $i from 1 through $row {
      [data-row~="#{$device}:#{$i}"] {
        grid-row: span $i / span $i;
      }

      [data-row-start~="#{$device}:#{$i}"] {
        grid-row-start: $i;
      }

      [data-row-end~="#{$device}:#{$i}"] {
        grid-row-end: $i;
      }
    }

    [data-row~="#{$device}:full"] {
      grid-row: 1 / -1;
    }

    [data-row~="#{$device}:auto"] {
      grid-row: auto;
    }

    [data-row-start~="#{$device}:auto"] {
      grid-row-start: auto;
    }

    [data-row-end~="#{$device}:auto"] {
      grid-row-end: auto;
    }
  }
}
