@charset 'UTF-8';
@use "sass:math";
@use "../global" as *;
// ====================================
//   Inset & Top, Left, Right , Bottom
// ====================================
[data-inset] {
  --#{$prefix}-top: auto;
  --#{$prefix}-right: auto;
  --#{$prefix}-bottom: auto;
  --#{$prefix}-left: auto;

  inset: var(--#{$prefix}-top) var(--#{$prefix}-right) var(--#{$prefix}-bottom) var(--#{$prefix}-left);
}

[data-inset~="0"] {
  --#{$prefix}-top: 0;
  --#{$prefix}-right: 0;
  --#{$prefix}-bottom: 0;
  --#{$prefix}-left: 0;
}
[data-inset~="auto"] {
  --#{$prefix}-top: auto;
  --#{$prefix}-right: auto;
  --#{$prefix}-bottom: auto;
  --#{$prefix}-left: auto;
}

[data-inset~="t-0"] {
  --#{$prefix}-top: 0;
}
[data-inset~="t-auto"] {
  --#{$prefix}-top: auto;
}

[data-inset~="r-auto"] {
  --#{$prefix}-right: auto;
}
[data-inset~="r-0"] {
  --#{$prefix}-right: 0;
}

[data-inset~="b-auto"] {
  --#{$prefix}-bottom: auto;
}
[data-inset~="b-0"] {
  --#{$prefix}-bottom: 0;
}

[data-inset~="l-auto"] {
  --#{$prefix}-left: auto;
}
[data-inset~="l-0"] {
  --#{$prefix}-left: 0;
}

@for $i from 0 through $space-range {
  [data-inset~="#{$i}"] {
    --#{$prefix}-top: calc(var(--#{$prefix}-space) * #{$i} / 16 * 1rem);
    --#{$prefix}-right: calc(var(--#{$prefix}-space) * #{$i} / 16 * 1rem);
    --#{$prefix}-bottom: calc(var(--#{$prefix}-space) * #{$i} / 16 * 1rem);
    --#{$prefix}-left: calc(var(--#{$prefix}-space) * #{$i} / 16 * 1rem);
  }
  [data-inset~="t-#{$i}"] {
    --#{$prefix}-top: calc(var(--#{$prefix}-space) * #{$i} / 16 * 1rem);
  }
  [data-inset~="r-#{$i}"] {
    --#{$prefix}-right: calc(var(--#{$prefix}-space) * #{$i} / 16 * 1rem);
  }
  [data-inset~="b-#{$i}"] {
    --#{$prefix}-bottom: calc(var(--#{$prefix}-space) * #{$i} / 16 * 1rem);
  }
  [data-inset~="l-#{$i}"] {
    --#{$prefix}-left: calc(var(--#{$prefix}-space) * #{$i} / 16 * 1rem);
  }
}

@each $device, $breakpoint in $breakpoints {
  @include mq($device) {
    [data-inset~="#{$device}:0"] {
      --#{$prefix}-top: 0;
      --#{$prefix}-right: 0;
      --#{$prefix}-bottom: 0;
      --#{$prefix}-left: 0;
    }
    [data-inset~="#{$device}:auto"] {
      --#{$prefix}-top: auto;
      --#{$prefix}-right: auto;
      --#{$prefix}-bottom: auto;
      --#{$prefix}-left: auto;
    }
    [data-inset~="#{$device}:t-0"] {
      --#{$prefix}-top: 0;
    }
    [data-inset~="#{$device}:t-auto"] {
      --#{$prefix}-top: auto;
    }
    [data-inset~="#{$device}:r-auto"] {
      --#{$prefix}-right: auto;
    }
    [data-inset~="#{$device}:r-0"] {
      --#{$prefix}-right: 0;
    }
    [data-inset~="#{$device}:b-auto"] {
      --#{$prefix}-bottom: auto;
    }
    [data-inset~="#{$device}:b-0"] {
      --#{$prefix}-bottom: 0;
    }
    [data-inset~="#{$device}:l-auto"] {
      --#{$prefix}-left: auto;
    }
    [data-inset~="#{$device}:l-0"] {
      --#{$prefix}-left: 0;
    }
    @for $i from 0 through $space-range {
      [data-inset~="#{$device}:#{$i}"] {
        --#{$prefix}-top: calc(var(--#{$prefix}-space) * #{$i} / 16 * 1rem);
        --#{$prefix}-right: calc(var(--#{$prefix}-space) * #{$i} / 16 * 1rem);
        --#{$prefix}-bottom: calc(var(--#{$prefix}-space) * #{$i} / 16 * 1rem);
        --#{$prefix}-left: calc(var(--#{$prefix}-space) * #{$i} / 16 * 1rem);
      }
      [data-inset~="#{$device}:t-#{$i}"] {
        --#{$prefix}-top: calc(var(--#{$prefix}-space) * #{$i} / 16 * 1rem);
      }
      [data-inset~="#{$device}:r-#{$i}"] {
        --#{$prefix}-right: calc(var(--#{$prefix}-space) * #{$i} / 16 * 1rem);
      }
      [data-inset~="#{$device}:b-#{$i}"] {
        --#{$prefix}-bottom: calc(var(--#{$prefix}-space) * #{$i} / 16 * 1rem);
      }
      [data-inset~="#{$device}:l-#{$i}"] {
        --#{$prefix}-left: calc(var(--#{$prefix}-space) * #{$i} / 16 * 1rem);
      }
    }
  }
}
