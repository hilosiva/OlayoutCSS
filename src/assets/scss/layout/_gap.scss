@charset "UTF-8";
@use "sass:math";
@use "../global" as *;

// ====================================
//  Gap
// ====================================
[data-gap] {
  gap: var(--#{$prefix}-gap-row, normal) var(--#{$prefix}-gap-col, normal);
}

@for $i from 0 through $space-range {
  [data-gap~="#{$i}"] {
    --#{$prefix}-gap-row: calc((var(--#{$prefix}-space) * #{$i}) / 16 * 1rem);
    --#{$prefix}-gap-col: calc((var(--#{$prefix}-space) * #{$i}) / 16 * 1rem);
  }
  [data-gap~="col-#{$i}"] {
    --#{$prefix}-gap-col: calc((var(--#{$prefix}-space) * #{$i}) / 16 * 1rem);
  }
  [data-gap~="row-#{$i}"] {
    --#{$prefix}-gap-row: calc((var(--#{$prefix}-space) * #{$i}) / 16 * 1rem);
  }
}

@each $device, $breakpoint in $breakpoints {
  @include mq($device) {
    @for $i from 0 through $space-range {
      [data-gap~="#{$device}:#{$i}"] {
        --#{$prefix}-gap-row: calc((var(--#{$prefix}-space) * #{$i}) / 16 * 1rem);
        --#{$prefix}-gap-col: calc((var(--#{$prefix}-space) * #{$i}) / 16 * 1rem);
      }
      [data-gap~="#{$device}:col-#{$i}"] {
        --#{$prefix}-gap-col: calc((var(--#{$prefix}-space) * #{$i}) / 16 * 1rem);
      }
      [data-gap~="#{$device}:row-#{$i}"] {
        --#{$prefix}-gap-row: calc((var(--#{$prefix}-space) * #{$i}) / 16 * 1rem);
      }
    }
  }
}
