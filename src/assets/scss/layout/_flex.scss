@charset "UTF-8";
@use "sass:math";
@use "../global" as *;

// ====================================
//  Flex
// ====================================

// Wrap
// ----------------------------
[data-flex~="nowrap"] {
  flex-wrap: nowrap;
}
[data-flex~="wrap"] {
  flex-wrap: wrap;
}

@each $device, $breakpoint in $breakpoints {
  @include mq($device) {
    [data-flex~="#{$device}:nowrap"] {
      flex-wrap: nowrap;
    }
    [data-flex~="#{$device}:wrap"] {
      flex-wrap: wrap;
    }
  }
}

// Direction
// ----------------------------

[data-flex~="row"] {
  flex-direction: row;
}
[data-flex~="reverse"] {
  flex-direction: row-reverse;
}
[data-flex~="column"] {
  flex-direction: column;
}

@each $device, $breakpoint in $breakpoints {
  @include mq($device) {
    [data-flex~="#{$device}:row"] {
      flex-direction: row;
    }
    [data-flex~="#{$device}:reverse"] {
      flex-direction: row-reverse;
    }
    [data-flex~="#{$device}:column"] {
      flex-direction: column;
    }
  }
}

[data-flex-item] {
  display: flex;
  flex-direction: column;
}

// Grow & Shrink
// ----------------------------

@for $i from 0 through 3 {
  [data-grow~="#{$i}"] {
    flex-grow: $i;
  }
  [data-shrink~="#{$i}"] {
    flex-shrink: $i;
  }
}

@each $device, $breakpoint in $breakpoints {
  @include mq($device) {
    @for $i from 0 through 3 {
      [data-grow~="#{$device}:#{$i}"] {
        flex-grow: $i;
      }
      [data-shrink~="#{$device}:#{$i}"] {
        flex-shrink: $i;
      }
    }
  }
}

// Over Container
// ----------------------------

[data-over~="left"] {
  flex-grow: 1;
}
[data-over~="right"] {
  flex-grow: 1;
}

[data-over~="clearLeft"][data-over~="clearRight"] {
  flex-grow: 0;
}

@each $device, $breakpoint in $breakpoints {
  @include mq($device) {
    [data-over~="#{$device}:left"] {
      flex-grow: 1;
    }
    [data-over~="#{$device}:right"] {
      flex-grow: 1;
    }
    [data-over~="#{$device}:clearLeft"][data-over~="#{$device}:clearRight"] {
      flex-grow: 0;
    }
  }
}
